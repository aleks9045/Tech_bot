from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from Data import config
from database import db
from bot import dp, bot
from keyboards import kb
from states.state import *


@dp.message_handler(state=NotLogin.state_, commands=["login"])
async def login(message: types.Message, state: FSMContext):
    await state.finish()
    config.operators = await db.get_all_operators()
    if message.from_user.id in config.operators:
        await LoginOperator.state_.set()
        await message.answer('‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.')
    elif message.from_user.id in config.admins:
        await LoginAdmin.state_.set()
        await message.answer('‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω.\n\n'
                             '/add id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ—Ä–∞—Ç–æ—Ä–∞.\n'
                             '/remove id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–µ—Ä–∞—Ç–æ—Ä–∞.')
    else:
        await RegisterUser.state_.set()
        if message.from_user.id in await db.get_all_users_id():
            info = await db.get_all_users_info(message.from_user.id)
            await message.answer(f'‚úîÔ∏è–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {info[0][2]}', reply_markup=kb.classes)
            await state.finish()
            await LoginUser.state_.set()
        else:
            await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã —É—á–∏—Ç–µ—Å—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä: '10A'")


@dp.message_handler(state=RegisterUser.state_)
async def register(message: types.Message, state: FSMContext):
    data = message.text.upper()
    name = message.from_user.first_name
    if len(data) > 3:
        await message.answer(' ‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    else:
        await db.new_user(message.from_user.id, data, name)
        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n–£–∑–Ω–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.', reply_markup=kb.classes)
        await state.finish()
        await LoginUser.state_.set()


@dp.message_handler(state=LoginUser.state_, commands=["me"])
async def me(message: types.Message, state: FSMContext):
    info = await db.get_all_users_info(message.from_user.id)
    await message.answer(f' üõÇ –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–π–¥–∏: {info[0][0]}\n'
                         f'–í–∞—à –∫–ª–∞—Å—Å: {info[0][1]}\n'
                         f'–í–∞—à–µ –∏–º—è: {info[0][2]}\n\n'
                         f'–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=kb.change)


@dp.callback_query_handler(lambda call: call.data == 'change', state=LoginUser.state_)
async def start_change(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await ChangeUser.class_.set()
    await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å, –≤–≤–µ–¥–∏—Ç–µ "–Ω–µ—Ç", –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')
    await callback.answer()


@dp.message_handler(state=ChangeUser.class_)
async def change_class(message: types.Message, state: FSMContext):
    data = message.text
    if data.lower() == '–Ω–µ—Ç':
        info = await db.get_all_users_info(message.from_user.id)
        await state.update_data(class_=info[0][1])
        await ChangeUser.next()
        await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.')
    elif len(data) > 3:
        await message.answer(' ‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    else:
        await state.update_data(class_=data.upper())
        await ChangeUser.next()
        await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, –≤–≤–µ–¥–∏—Ç–µ "–Ω–µ—Ç", –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')


@dp.message_handler(state=ChangeUser.name)
async def change_name(message: types.Message, state: FSMContext):
    data = message.text
    if data.lower() == '–Ω–µ—Ç':
        info = await db.get_all_users_info(message.from_user.id)
        await state.update_data(name=info[0][2])
        state_data = await state.get_data()
        await db.change_user_info(state_data['class_'], state_data['name'], message.from_user.id)
        await state.finish()
        await LoginUser.state_.set()
        await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ -> /me')
    else:
        await state.update_data(name=data)
        state_data = await state.get_data()
        await db.change_user_info(state_data['class_'], state_data['name'], message.from_user.id)
        await state.finish()
        await LoginUser.state_.set()
        await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ -> /me')


@dp.message_handler(state=LoginOperator.state_, commands=["logout"])
async def logout_operator(message: types.Message, state: FSMContext):
    await state.finish()
    await NotLogin.state_.set()
    await message.answer('‚ö†Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.', reply_markup=kb.ReplyKeyboardRemove())


@dp.message_handler(state=LoginAdmin.state_, commands=["logout"])
async def logout_admin(message: types.Message, state: FSMContext):
    await state.finish()
    await NotLogin.state_.set()
    await message.answer('‚ö†Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.', reply_markup=kb.ReplyKeyboardRemove())


@dp.message_handler(state=LoginUser.state_, commands=["logout"])
async def logout(message: types.Message, state: FSMContext):
    await state.finish()
    await NotLogin.state_.set()
    await message.answer('‚ö†Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.', reply_markup=kb.ReplyKeyboardRemove())


def register_handlers_log_in_out(dp: Dispatcher):
    dp.register_message_handler(login, commands=['login'])
    dp.register_message_handler(logout_admin, commands=['logout'])
    dp.register_message_handler(logout_operator, commands=['logout'])
    dp.register_message_handler(logout, commands=['logout'])