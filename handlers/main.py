from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from Data import config
from database import db
from bot import dp, bot
from keyboards import kb
from states.state import *


@dp.message_handler(state='*', commands=['start'])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.first_name}</b>\n"
                                                 f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –∑–∞–≥–µ—Ä–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                                                 f"–í–≤–µ–¥–∏—Ç–µ /help , —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å <b>—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</b> –±–æ—Ç–∞.", parse_mode='HTML')
    await NotLogin.state_.set()


@dp.message_handler(state='*', commands=['help'])
async def help_me_help(message: types.Message):
    await bot.send_message(message.from_user.id, f"üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
                                                 f"/login ‚Äî –ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n"
                                                 f"/logout ‚Äî –ö–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
                                                 f"/stop ‚Äî –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—â–µ–Ω–∏—è.\n"
                                                 f"/help_me - –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞(–¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤)."
                                                 f"/find - –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞(–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤).")


@dp.message_handler(state=LoginUser.state_, commands=['help_me'])
async def help_me(message: types.Message, state: FSMContext):
    chat_two = await db.get_chat(message.from_user.id)
    if not await db.create_chat(message.from_user.id, chat_two):
        await db.add_queue(message.from_user.id)
        await bot.send_message(message.from_user.id, f"üîé –ü–æ–∏—Å–∫ <b>–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ</b> –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...",
                               reply_markup=kb.cancel_search,
                               parse_mode='HTML')
        await state.finish()
        await InChat.state_.set()
        # await InSearch.state_.set()
    else:
        await state.finish()
        await InChat.state_.set()

        # stated2 = dp.current_state(chat=chat_two)
        # await stated2.finish()
        # await stated2.set_state(InChat.state_)

        await bot.send_message(chat_two, "‚úÖ –ö–ª–∏–µ–Ω—Ç <b>–Ω–∞–π–¥–µ–Ω</b>!\n", reply_markup=kb.stop, parse_mode='HTML')
        await bot.send_message(message.from_user.id, "‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä <b>–Ω–∞–π–¥–µ–Ω!</b>\n"
                                                      "–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.", parse_mode='HTML', reply_markup=kb.stop)


@dp.message_handler(state=LoginOperator.state_, commands=["find"])
async def find(message: types.Message, state: FSMContext):
    chat_two = await db.get_chat(message.chat.id)
    if not await db.create_chat(message.chat.id, chat_two):
        await db.add_queue(message.from_user.id)
        await bot.send_message(message.chat.id, f"üîé –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ <b>–∫–ª–∏–µ–Ω—Ç–∞</b>...", reply_markup=kb.cancel_search,
                               parse_mode='HTML')
        await state.finish()
        await InChat.state_.set()
        # await InSearch.state_.set()
    else:
        await state.finish()
        await InChat.state_.set()

        # stated2 = dp.current_state(chat=chat_two)
        # await stated2.finish()
        # await stated2.set_state(InChat.state_)

        await bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç <b>–Ω–∞–π–¥–µ–Ω!</b>", reply_markup=kb.stop,
                               parse_mode='HTML')
        await bot.send_message(chat_two, "‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä <b>–Ω–∞–π–¥–µ–Ω!</b>", reply_markup=kb.stop,
                               parse_mode='HTML')


@dp.callback_query_handler(lambda call: call.data == 'cancel_button', state=InChat.state_)
async def del_queue(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if callback.from_user.id in config.operators:
        await LoginOperator.state_.set()
        await bot.send_message(callback.from_user.id, 'üö´ –ü–æ–∏—Å–∫ <b>–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>.', parse_mode='HTML',
                               reply_markup=kb.find)
    else:
        await LoginUser.state_.set()
        await bot.send_message(callback.from_user.id, 'üö´ –ü–æ–∏—Å–∫ <b>–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>.', parse_mode='HTML')
    await bot.answer_callback_query(callback.id)
    await db.delete_queue(callback.from_user.id)


@dp.message_handler(state=InChat.state_, commands=["stop"])
async def stop(message: types.Message, state: FSMContext):
    try:
        chat_info = await db.get_active_chat(message.from_user.id)
        if chat_info:
            id_ = await db.vi_vishli_iz_chata(message.from_user.id)

            await bot.send_message(id_, "‚ùóÔ∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ <b>–ø–æ–∫–∏–Ω—É–ª —á–∞—Ç</b>",
                                   reply_markup=types.ReplyKeyboardRemove(),
                                   parse_mode='HTML')
            await bot.send_message(message.from_user.id, "‚ùóÔ∏è –í—ã <b>–≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞</b>",
                                   reply_markup=types.ReplyKeyboardRemove(),
                                   parse_mode='HTML')

            if message.from_user.id in config.operators:
                await state.finish()
                await LoginOperator.state_.set()
                await bot.send_message(id_, "‚åö –ù–∞—á–∞–ª—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...",
                                       reply_markup=kb.cancel_search,
                                       parse_mode='HTML')
            else:
                await state.finish()
                await LoginUser.state_.set()
                await bot.send_message(id_, "‚åö –ù–∞—á–∞–ª—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...",
                                       reply_markup=kb.cancel_search,
                                       parse_mode='HTML')
            await db.delete_chat(chat_info[0])
        else:
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è–í—ã <b>–Ω–µ –Ω–∞—á–∞–ª–∏</b> —á–∞—Ç.", parse_mode='HTML')
    except Exception as ex_:
        await bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        print(ex_)


@dp.message_handler(state=InChat.state_, content_types=['photo', 'text'])
async def talking(message: types.Message):
    get_active_chat = await db.check_active_chat(message.chat.id)
    if get_active_chat:
        my_id = message.from_user.id
        one = get_active_chat[1]
        two = get_active_chat[2]
        dct = {
            one: two,
            two: one
        }
        if message.text:
            await bot.send_message(dct[my_id], message.text)
        elif message.photo:
            await bot.send_photo(dct[my_id], message.photo[-1].file_id, caption=message.caption)
        else:
            pass
    else:
        pass


def register_handlers_main(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(help_me_help, commands=['help'])
    dp.register_message_handler(stop, commands=['stop'])
    dp.register_message_handler(find, commands=['find'])
    dp.register_message_handler(talking)
    dp.register_message_handler(help_me, commands=['help_me'])
